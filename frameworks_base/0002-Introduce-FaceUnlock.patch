From 12612d4909468f93a60fc6e29152fadc6f568463 Mon Sep 17 00:00:00 2001
From: sbwml <984419930@qq.com>
Date: Thu, 26 Nov 2020 04:31:02 +0800
Subject: [PATCH] Introduce FaceUnlock

---
 services/core/Android.bp                      |   1 +
 .../biometrics/BiometricServiceBase.java      |  18 +-
 .../biometrics/face/AndroidSenseManager.java  | 443 ++++++++++++++++++
 .../server/biometrics/face/FaceService.java   |  95 +++-
 4 files changed, 540 insertions(+), 17 deletions(-)
 create mode 100644 services/core/java/com/android/server/biometrics/face/AndroidSenseManager.java

diff --git a/services/core/Android.bp b/services/core/Android.bp
index 2510f6783819..cf551cd183b3 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -134,6 +134,7 @@ java_library_static {
         "overlayable_policy_aidl-java",
         "SurfaceFlingerProperties",
         "vendor.lineage.biometrics.fingerprint.inscreen-V1.0-java",
+        "vendor.aosp.biometrics.face.V1_0",
     ],
 }
 
diff --git a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
index 5bb4d272eae8..c79e9555337f 100644
--- a/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
+++ b/services/core/java/com/android/server/biometrics/BiometricServiceBase.java
@@ -718,7 +718,7 @@ protected ClientMonitor getPendingClient() {
      * Callback handlers from the daemon. The caller must put this on a handler.
      */
 
-    protected void handleAcquired(long deviceId, int acquiredInfo, int vendorCode) {
+    public void handleAcquired(long deviceId, int acquiredInfo, int vendorCode) {
         ClientMonitor client = mCurrentClient;
         if (client != null && client.onAcquired(acquiredInfo, vendorCode)) {
             removeClient(client);
@@ -730,7 +730,7 @@ protected void handleAcquired(long deviceId, int acquiredInfo, int vendorCode) {
         }
     }
 
-    protected void handleAuthenticated(boolean authenticated,
+    public void handleAuthenticated(boolean authenticated,
             BiometricAuthenticator.Identifier identifier, ArrayList<Byte> token) {
         ClientMonitor client = mCurrentClient;
 
@@ -746,7 +746,7 @@ protected void handleAuthenticated(boolean authenticated,
         }
     }
 
-    protected void handleEnrollResult(BiometricAuthenticator.Identifier identifier,
+    public void handleEnrollResult(BiometricAuthenticator.Identifier identifier,
             int remaining) {
         ClientMonitor client = mCurrentClient;
         if (client != null && client.onEnrollResult(identifier, remaining)) {
@@ -759,7 +759,7 @@ protected void handleEnrollResult(BiometricAuthenticator.Identifier identifier,
         }
     }
 
-    protected void handleError(long deviceId, int error, int vendorCode) {
+    public void handleError(long deviceId, int error, int vendorCode) {
         final ClientMonitor client = mCurrentClient;
 
         if (DEBUG) Slog.v(getTag(), "handleError(client="
@@ -785,7 +785,7 @@ protected void handleError(long deviceId, int error, int vendorCode) {
         }
     }
 
-    protected void handleRemoved(BiometricAuthenticator.Identifier identifier,
+    public void handleRemoved(BiometricAuthenticator.Identifier identifier,
             final int remaining) {
         if (DEBUG) Slog.w(getTag(), "Removed: fid=" + identifier.getBiometricId()
                 + ", dev=" + identifier.getDeviceId()
@@ -811,7 +811,7 @@ protected void handleRemoved(BiometricAuthenticator.Identifier identifier,
         }
     }
 
-    protected void handleEnumerate(BiometricAuthenticator.Identifier identifier, int remaining) {
+    public void handleEnumerate(BiometricAuthenticator.Identifier identifier, int remaining) {
         ClientMonitor client = mCurrentClient;
         if (client != null) {
             client.onEnumerationResult(identifier, remaining);
@@ -1170,7 +1170,7 @@ protected void removeClient(ClientMonitor client) {
     /**
      * Populates existing authenticator ids. To be used only during the start of the service.
      */
-    protected void loadAuthenticatorIds() {
+    public void loadAuthenticatorIds() {
         // This operation can be expensive, so keep track of the elapsed time. Might need to move to
         // background if it takes too long.
         long t = System.currentTimeMillis();
@@ -1249,7 +1249,7 @@ protected long getAuthenticatorId(int callingUserId) {
      * This method should be called upon connection to the daemon, and when user switches.
      * @param userId
      */
-    protected void doTemplateCleanupForUser(int userId) {
+    public void doTemplateCleanupForUser(int userId) {
         if (mCleanupUnusedFingerprints) {
             enumerateUser(userId);
         }
@@ -1313,7 +1313,7 @@ protected void handleUserSwitching(int userId) {
         doTemplateCleanupForUser(userId);
     }
 
-    protected void notifyLockoutResetMonitors() {
+    public void notifyLockoutResetMonitors() {
         for (int i = 0; i < mLockoutMonitors.size(); i++) {
             mLockoutMonitors.get(i).sendLockoutReset();
         }
diff --git a/services/core/java/com/android/server/biometrics/face/AndroidSenseManager.java b/services/core/java/com/android/server/biometrics/face/AndroidSenseManager.java
new file mode 100644
index 000000000000..d7a9dcf0415b
--- /dev/null
+++ b/services/core/java/com/android/server/biometrics/face/AndroidSenseManager.java
@@ -0,0 +1,443 @@
+/*
+ * Copyright (C) 2018 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.biometrics.face;
+
+import static android.hardware.biometrics.BiometricConstants.BIOMETRIC_SUCCESS;
+import static android.hardware.biometrics.BiometricConstants.BIOMETRIC_ERROR_TIMEOUT;
+
+import android.app.ActivityManager;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.ServiceConnection;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.hardware.face.Face;
+import android.os.Binder;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.RemoteException;
+import android.os.SystemProperties;
+import android.os.UserHandle;
+import android.util.Slog;
+import android.util.SparseArray;
+
+import com.android.server.biometrics.AuthenticationClient;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import vendor.aosp.biometrics.face.V1_0.ISenseService;
+import vendor.aosp.biometrics.face.V1_0.ISenseServiceReceiver;
+
+/**
+ * A manager that connects to the Paranoid FaceSense services which
+ * dispacthes biometric face calls
+ *
+ * @hide
+ */
+public class AndroidSenseManager {
+
+    protected static final String TAG = "AndroidSenseManager";
+
+    public static final int SENSE_ID = 1109;
+
+    private Context mContext;
+    private FaceService mFaceService;
+    private Handler mHandler;
+
+    private int mCurrentUserId;
+
+    private Handler mSenseServiceHandler;
+    private boolean mBound = false;
+    private static final boolean sSenseEnabled = SystemProperties.getBoolean("ro.face.sense_service", false);
+    private final BroadcastReceiver mUserUnlockReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (sSenseEnabled) {
+                if (getService(mCurrentUserId) == null) {
+                    bind(mCurrentUserId);
+                }
+            }
+        }
+    };
+
+    final SparseArray<ISenseService> mServices = new SparseArray<>();
+    final ISenseServiceReceiver mReceiver = new ISenseServiceReceiver.Stub() {
+        @Override
+        public void onEnrollResult(int faceId, int userId, int remaining) {
+            mHandler.post(() -> {
+                mFaceService.handleEnrollResult(new Face(
+                        mFaceService.getBiometricUtils().getUniqueName(
+                        mContext, userId), faceId, SENSE_ID), remaining);
+            });
+        }
+
+        @Override
+        public void onAuthenticated(int faceId, int userId, byte[] token) {
+            mHandler.post(() -> {
+                Face face = new Face("", faceId, SENSE_ID);
+                ArrayList<Byte> token_AL = new ArrayList<>(token.length);
+                for (byte b : token) {
+                    token_AL.add(new Byte(b));
+                }
+                final boolean authenticated = faceId != 0;
+                mFaceService.handleAuthenticated(authenticated, face, token_AL);
+            });
+        }
+
+        @Override
+        public void onAcquired(int userId, int acquiredInfo, int vendorCode) {
+            mHandler.post(() -> {
+                mFaceService.handleAcquired(SENSE_ID, acquiredInfo, vendorCode);
+            });
+        }
+
+        @Override
+        public void onError(int error, int vendorCode) {
+            mHandler.post(() -> {
+                mFaceService.handleError(SENSE_ID, error, vendorCode);
+            });
+        }
+
+        @Override
+        public void onRemoved(int[] faceIds, int userId) throws RemoteException {
+            mHandler.post(() -> {
+                if (faceIds.length > 0) {
+                    for (int i = 0; i < faceIds.length; i++) {
+                        mFaceService.handleRemoved(new Face("", faceIds[i], SENSE_ID), (faceIds.length - i) - 1);
+                    }
+                    return;
+                }
+                mFaceService.handleRemoved(new Face("", 0, SENSE_ID), 0);
+            });
+        }
+
+        @Override
+        public void onEnumerate(int[] faceIds, int userId) throws RemoteException {
+            mHandler.post(() -> {
+                if (faceIds.length > 0) {
+                    for (int i = 0; i < faceIds.length; i++) {
+                        mFaceService.handleEnumerate(new Face("", faceIds[i], SENSE_ID), (faceIds.length - i) - 1);
+                    }
+                    return;
+                }
+                mFaceService.handleEnumerate(null, 0);
+            });
+        }
+
+        @Override
+        public void onLockoutChanged(long duration) throws RemoteException {
+            if (duration == 0) {
+                mFaceService.mCurrentUserLockoutMode = AuthenticationClient.LOCKOUT_NONE;
+            } else if (duration == Long.MAX_VALUE) {
+                mFaceService.mCurrentUserLockoutMode = AuthenticationClient.LOCKOUT_PERMANENT;
+            } else {
+                mFaceService.mCurrentUserLockoutMode = AuthenticationClient.LOCKOUT_TIMED;
+            }
+            mHandler.post(() -> {
+                if (duration == 0) {
+                    mFaceService.notifyLockoutResetMonitors();
+                }
+            });
+        }
+    };
+
+    public AndroidSenseManager(Context context, FaceService service, Handler handler) {
+        mContext = context;
+        mFaceService = service;
+        mHandler = handler;
+        mContext.registerReceiver(mUserUnlockReceiver, new IntentFilter(Intent.ACTION_USER_UNLOCKED));
+    }
+
+    public int authenticate(long operationId) {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                service.authenticate(operationId);
+            } catch (RemoteException e) {
+                Slog.e(TAG, "authenticate failed", e);
+            }
+            return BIOMETRIC_SUCCESS;
+        }
+        bind(mCurrentUserId);
+        Slog.w(TAG, "authenticate(): sense service not started!");
+        return BIOMETRIC_ERROR_TIMEOUT;
+    }
+
+    public int cancel() {
+        ISenseService service = getService(mCurrentUserId);
+        if (service == null) {
+            return BIOMETRIC_SUCCESS;
+        }
+
+        try {
+            service.cancel();
+        } catch (RemoteException e) {
+            Slog.e(TAG, "cancel failed", e);
+        }
+        return BIOMETRIC_SUCCESS;
+    }
+
+    public int remove(int biometricId) {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                service.remove(biometricId);
+            } catch (RemoteException e) {
+                Slog.e(TAG, "remove failed", e);
+            }
+            return BIOMETRIC_SUCCESS;
+        }
+        bind(mCurrentUserId);
+        Slog.w(TAG, "remove(): sense service not started!");
+        return BIOMETRIC_ERROR_TIMEOUT;
+    }
+
+    public int enumerate() {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            mSenseServiceHandler.post(() -> {
+                try {
+                    service.enumerate();
+                } catch (RemoteException e) {
+                    Slog.e(TAG, "enumerate failed", e);
+                    mFaceService.handleError(SENSE_ID, 8, 0);
+                }
+            });
+            return BIOMETRIC_SUCCESS;
+        }
+        bind(mCurrentUserId);
+        Slog.w(TAG, "enumerate(): sense service not started!");
+        return BIOMETRIC_ERROR_TIMEOUT;
+    }
+
+    public int enroll(byte[] cryptoToken, int timeout, int[] disabledFeatures) {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                service.enroll(cryptoToken, timeout, disabledFeatures);
+            } catch (RemoteException e) {
+                Slog.e(TAG, "enroll failed", e);
+            }
+            return BIOMETRIC_SUCCESS;
+        }
+        bind(mCurrentUserId);
+        Slog.w(FaceService.TAG, "enroll(): sense service not started!");
+        return BIOMETRIC_ERROR_TIMEOUT;
+    }
+
+    public void resetLockout(byte[] cryptoToken) {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                service.resetLockout(cryptoToken);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+            return;
+        }
+        bind(mCurrentUserId);
+        Slog.w(TAG, "resetLockout(): sense service not started!");
+    }
+
+    public int getAuthenticatorId() {
+        int authId = 0;
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                authId = service.getAuthenticatorId();
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+            return authId;
+        }
+        bind(mCurrentUserId);
+        Slog.w(TAG, "updateActiveGroup(): sense service not started!");
+        return authId;
+    }
+
+    public long generateChallenge(int timeout) {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                return service.generateChallenge(timeout);
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        } else {
+            bind(mCurrentUserId);
+            Slog.w(TAG, "startGenerateChallenge(): sense service not started!");
+        }
+        return BIOMETRIC_SUCCESS;
+    }
+
+    public int revokeChallenge() {
+        ISenseService service = getService(mCurrentUserId);
+        if (service != null) {
+            try {
+                return service.revokeChallenge();
+            } catch (RemoteException e) {
+                throw e.rethrowFromSystemServer();
+            }
+        }
+        return BIOMETRIC_SUCCESS;
+    }
+
+    public void setCurrentUserId(int userId) {
+        mCurrentUserId = userId;
+    }
+
+    public void setServiceHandler(Handler handler) {
+        mSenseServiceHandler = handler;
+    }
+
+    public boolean callForBind(int userId) {
+        return bind(userId);
+    }
+
+    private boolean bind(int userId) {
+        Slog.d(TAG, "bind");
+        if (!isServiceEnabled()) {
+            Slog.d(TAG, "Sense service disabled");
+            return false;
+        } else if (mBound) {
+            Slog.d(TAG, "Sense service is binding");
+            return true;
+        } else {
+            if (userId != UserHandle.USER_NULL && getService(userId) == null) {
+                if (createService(userId)) {
+                    return true;
+                }
+            }
+            return false;
+        }
+    }
+
+    private boolean createService(int userId) {
+        try {
+            Intent intent = getServiceIntent();
+            if (intent == null) {
+                Slog.d(TAG, "Sense service not found");
+                return false;
+            }
+            boolean result = mContext.bindServiceAsUser(intent, new SenseServiceConnection(userId), 65, UserHandle.of(userId));
+            if (result) {
+                mBound = true;
+            }
+            return result;
+        } catch (Exception e) {
+            Slog.e(TAG, "bind failed", e);
+        }
+        return false;
+    }
+
+    public ISenseService getService(int userId) {
+        if (userId == UserHandle.USER_NULL) {
+            mFaceService.updateActiveGroup(ActivityManager.getCurrentUser(), null);
+        }
+        return mServices.get(mCurrentUserId);
+    }
+
+    private Intent getServiceIntent() {
+        Intent intent = new Intent("sense:remote");
+        intent.setComponent(ComponentName.unflattenFromString(
+                "com.android.faceunlock/com.android.faceunlock.SenseService"));
+        return intent;
+    }
+
+    private boolean isServiceEnabled() {
+        if (!sSenseEnabled) {
+            return false;
+        }
+        PackageManager pm = mContext.getPackageManager();
+        Intent intent = getServiceIntent();
+        ResolveInfo info = pm.resolveService(intent, PackageManager.MATCH_ALL);
+        return info != null && info.serviceInfo.isEnabled();
+    }
+
+    public boolean isEnabled() {
+        return sSenseEnabled;
+    }
+
+    public boolean isDetected() {
+        boolean enabled = isServiceEnabled();
+        if (enabled) {
+            mHandler.post(() -> {
+                if (getService(mCurrentUserId) == null) {
+                    bind(mCurrentUserId);
+                }
+            });
+        }
+        return enabled;
+    }
+
+    private class SenseServiceConnection implements ServiceConnection {
+        int mUserId;
+
+        public SenseServiceConnection(int userId) {
+            mUserId = userId;
+        }
+
+        @Override
+        public void onServiceConnected(ComponentName className, IBinder service) {
+            Slog.d(TAG, "Sense service connected");
+            ISenseService senseService = ISenseService.Stub.asInterface(service);
+            if (senseService != null) {
+                synchronized (mServices) {
+                    try {
+                        senseService.setCallback(mReceiver);
+                        senseService.asBinder().linkToDeath(new IBinder.DeathRecipient() {
+                            @Override
+                            public void binderDied() {
+                                Slog.e(TAG, "Sense service binder died");
+                                mServices.remove(mUserId);
+                                if (mUserId == mCurrentUserId) {
+                                    bind(mUserId);
+                                }
+                            }
+                        }, 0);
+                        mServices.put(mUserId, senseService);
+                        mHandler.post(() -> {
+                            if (mServices.size() == 1) {
+                                mFaceService.loadAuthenticatorIds();
+                            }
+                            mFaceService.updateActiveGroup(mUserId, null);
+                            mFaceService.doTemplateCleanupForUser(mUserId);
+                        });
+                    } catch (RemoteException e) {
+                        e.printStackTrace();
+                    }
+                    mBound = false;
+                }
+            }
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName className) {
+            Slog.d(TAG, "Sense service disconnected");
+            mServices.remove(mUserId);
+            mBound = false;
+            if (mUserId == mCurrentUserId) {
+                bind(mUserId);
+            }
+        }
+    }
+}
diff --git a/services/core/java/com/android/server/biometrics/face/FaceService.java b/services/core/java/com/android/server/biometrics/face/FaceService.java
index e5a1898459a2..231e132ac21d 100644
--- a/services/core/java/com/android/server/biometrics/face/FaceService.java
+++ b/services/core/java/com/android/server/biometrics/face/FaceService.java
@@ -60,6 +60,7 @@
 import com.android.internal.R;
 import com.android.internal.annotations.GuardedBy;
 import com.android.internal.logging.MetricsLogger;
+import com.android.internal.os.BackgroundThread;
 import com.android.internal.util.DumpUtils;
 import com.android.server.SystemServerInitThreadPool;
 import com.android.server.biometrics.AuthenticationClient;
@@ -226,11 +227,14 @@ protected int statsModality() {
 
         @Override
         public boolean shouldFrameworkHandleLockout() {
-            return false;
+            return mSenseManager.isEnabled();
         }
 
         @Override
         public boolean wasUserDetected() {
+            if (mSenseManager.isEnabled()) {
+                return mLastAcquire != FaceManager.FACE_ACQUIRED_NOT_DETECTED;
+            }
             return mLastAcquire != FaceManager.FACE_ACQUIRED_NOT_DETECTED
                     && mLastAcquire != FaceManager.FACE_ACQUIRED_SENSOR_DIRTY;
         }
@@ -380,12 +384,13 @@ public void enroll(int userId, final IBinder token, final byte[] cryptoToken,
                 final IFaceServiceReceiver receiver, final String opPackageName,
                 final int[] disabledFeatures) {
             checkPermission(MANAGE_BIOMETRIC);
-            updateActiveGroup(userId, opPackageName);
 
-            mHandler.post(() -> {
-                mNotificationManager.cancelAsUser(NOTIFICATION_TAG, NOTIFICATION_ID,
-                        UserHandle.CURRENT);
-            });
+            if (!mSenseManager.isEnabled()) {
+                mHandler.post(() -> {
+                    mNotificationManager.cancelAsUser(NOTIFICATION_TAG, NOTIFICATION_ID,
+                            UserHandle.CURRENT);
+                });
+            }
 
             final boolean restricted = isRestricted();
             final EnrollClientImpl client = new EnrollClientImpl(getContext(), mDaemonWrapper,
@@ -559,6 +564,10 @@ public boolean isHardwareDetected(String opPackageName) {
                 return false;
             }
 
+            if (mSenseManager.isEnabled()) {
+                return mSenseManager.isDetected();
+            }
+
             final long token = Binder.clearCallingIdentity();
             try {
                 IBiometricsFace daemon = getFaceDaemon();
@@ -845,8 +854,9 @@ public void onEnumerated(BiometricAuthenticator.Identifier identifier, int remai
     private UsageStats mUsageStats;
     private boolean mRevokeChallengePending = false;
     // One of the AuthenticationClient constants
-    private int mCurrentUserLockoutMode;
+    protected int mCurrentUserLockoutMode;
 
+    private AndroidSenseManager mSenseManager;
     private NotificationManager mNotificationManager;
 
     private int[] mBiometricPromptIgnoreList;
@@ -916,6 +926,7 @@ public void onError(final long deviceId, final int userId, final int error,
                         mDaemon = null;
                         mHalDeviceId = 0;
                         mCurrentUserId = UserHandle.USER_NULL;
+                        mSenseManager.setCurrentUserId(mCurrentUserId);
                     }
                 }
             });
@@ -985,6 +996,9 @@ public void onLockoutChanged(long duration) {
     private final DaemonWrapper mDaemonWrapper = new DaemonWrapper() {
         @Override
         public int authenticate(long operationId, int groupId) throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                return mSenseManager.authenticate(operationId);
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "authenticate(): no face HAL!");
@@ -995,6 +1009,9 @@ public int authenticate(long operationId, int groupId) throws RemoteException {
 
         @Override
         public int cancel() throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                return mSenseManager.cancel();
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "cancel(): no face HAL!");
@@ -1005,6 +1022,9 @@ public int cancel() throws RemoteException {
 
         @Override
         public int remove(int groupId, int biometricId) throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                return mSenseManager.remove(biometricId);
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "remove(): no face HAL!");
@@ -1015,6 +1035,9 @@ public int remove(int groupId, int biometricId) throws RemoteException {
 
         @Override
         public int enumerate() throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                return mSenseManager.enumerate();
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "enumerate(): no face HAL!");
@@ -1026,6 +1049,16 @@ public int enumerate() throws RemoteException {
         @Override
         public int enroll(byte[] cryptoToken, int groupId, int timeout,
                 ArrayList<Integer> disabledFeatures) throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                int[] dfs = new int[0];
+                if (disabledFeatures != null && disabledFeatures.size() > 0) {
+                    dfs = new int[disabledFeatures.size()];
+                    for (int i = 0; i < disabledFeatures.size(); i++) {
+                        dfs[i] = disabledFeatures.get(i).intValue();
+                    }
+                }
+                return mSenseManager.enroll(cryptoToken, timeout, dfs);
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "enroll(): no face HAL!");
@@ -1040,6 +1073,10 @@ public int enroll(byte[] cryptoToken, int groupId, int timeout,
 
         @Override
         public void resetLockout(byte[] cryptoToken) throws RemoteException {
+            if (mSenseManager.isEnabled()) {
+                mSenseManager.resetLockout(cryptoToken);
+                return;
+            }
             IBiometricsFace daemon = getFaceDaemon();
             if (daemon == null) {
                 Slog.w(TAG, "resetLockout(): no face HAL!");
@@ -1077,6 +1114,8 @@ public FaceService(Context context) {
                 .getIntArray(R.array.config_face_acquire_enroll_ignorelist);
         mEnrollIgnoreListVendor = getContext().getResources()
                 .getIntArray(R.array.config_face_acquire_vendor_enroll_ignorelist);
+
+        mSenseManager = new AndroidSenseManager(getContext(), this, mHandler);
     }
 
     @Override
@@ -1092,6 +1131,11 @@ protected void removeClient(ClientMonitor client) {
     public void onStart() {
         super.onStart();
         publishBinderService(Context.FACE_SERVICE, new FaceServiceWrapper());
+        if (mSenseManager.isEnabled()) {
+            mSenseManager.setServiceHandler(BackgroundThread.getHandler());
+            mHalDeviceId = AndroidSenseManager.SENSE_ID;
+            return;
+        }
         // Get the face daemon on FaceService's on thread so SystemServerInitThreadPool isn't
         // blocked
         SystemServerInitThreadPool.submit(() -> mHandler.post(this::getFaceDaemon),
@@ -1136,10 +1180,26 @@ public void serviceDied(long cookie) {
         mDaemon = null;
 
         mCurrentUserId = UserHandle.USER_NULL; // Force updateActiveGroup() to re-evaluate
+        mSenseManager.setCurrentUserId(mCurrentUserId);
     }
 
     @Override
     protected void updateActiveGroup(int userId, String clientPackage) {
+        if (mSenseManager.isEnabled()) {
+            mCurrentUserId = userId;
+            mSenseManager.setCurrentUserId(mCurrentUserId);
+            if (mSenseManager.getService(mCurrentUserId) != null) {
+                Map map = mAuthenticatorIds;
+                Integer valueOf = Integer.valueOf(mCurrentUserId);
+                long authId = 0;
+                if (hasEnrolledBiometrics(mCurrentUserId)) {
+                    authId = (long) mSenseManager.getAuthenticatorId();
+                }
+                map.put(valueOf, Long.valueOf(authId));
+            }
+            return;
+        }
+
         IBiometricsFace daemon = getFaceDaemon();
 
         if (daemon != null) {
@@ -1164,6 +1224,7 @@ protected void updateActiveGroup(int userId, String clientPackage) {
 
                     daemon.setActiveUser(userId, faceDir.getAbsolutePath());
                     mCurrentUserId = userId;
+                    mSenseManager.setCurrentUserId(mCurrentUserId);
                     mAuthenticatorIds.put(userId,
                             hasEnrolledBiometrics(userId) ? daemon.getAuthenticatorId().value : 0L);
                 }
@@ -1190,7 +1251,16 @@ protected long getHalDeviceId() {
 
     @Override
     protected void handleUserSwitching(int userId) {
-        super.handleUserSwitching(userId);
+        if (mSenseManager.isEnabled()) {
+            updateActiveGroup(userId, null);
+            if (mSenseManager.getService(userId) != null) {
+                doTemplateCleanupForUser(userId);
+            } else {
+                mSenseManager.callForBind(userId);
+            }
+        } else {
+            super.handleUserSwitching(userId);
+        }
         // Will be updated when we get the callback from HAL
         mCurrentUserLockoutMode = AuthenticationClient.LOCKOUT_NONE;
     }
@@ -1279,6 +1349,9 @@ private synchronized IBiometricsFace getFaceDaemon() {
     }
 
     private long startGenerateChallenge(IBinder token) {
+        if (mSenseManager.isEnabled()) {
+            return mSenseManager.generateChallenge(CHALLENGE_TIMEOUT_SEC);
+        }
         IBiometricsFace daemon = getFaceDaemon();
         if (daemon == null) {
             Slog.w(TAG, "startGenerateChallenge: no face HAL!");
@@ -1293,6 +1366,9 @@ private long startGenerateChallenge(IBinder token) {
     }
 
     private int startRevokeChallenge(IBinder token) {
+        if (mSenseManager.isEnabled()) {
+            return mSenseManager.revokeChallenge();
+        }
         IBiometricsFace daemon = getFaceDaemon();
         if (daemon == null) {
             Slog.w(TAG, "startRevokeChallenge: no face HAL!");
@@ -1371,6 +1447,9 @@ private void dumpHal(FileDescriptor fd, String[] args) {
             return;
         }
 
+        // Turn off face if Paranoid FaceSense is enabled.
+        if (mSenseManager.isEnabled()) return;
+
         // The debug method takes two file descriptors. The first is for text
         // output, which we will drop.  The second is for binary data, which
         // will be the protobuf data.
